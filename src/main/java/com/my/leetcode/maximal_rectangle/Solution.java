package com.my.leetcode.maximal_rectangle;

import java.util.ArrayList;
import java.util.Collections;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Random;
import java.util.Set;

/**
 * Created by alex.bykovsky on 5/4/17.
 */
public class Solution {

	public static void main(String[] args) {

		/*new Solution().maximalRectangle2(new String[] {
				"1",
				"0",
				"1",
				"1",
				"1",
				"1",
				"0",
		});

		new Solution().maximalRectangle2(new String[] {
				"1011110",
		});

		new Solution().maximalRectangle(new char[][] {
				{'1', '0', '0'},
				{'1', '1', '1'},
				{'1', '1', '1'},
				{'0', '1', '0'}}
		);

		new Solution().maximalRectangle2(new String[] {
				"1100",
				"1110",
				"1100",
		});

		new Solution().maximalRectangle2(new String[] {
				"0010",
				"1111",
				"1111",
				"1110",
				"1100",
				"1111",
				"1110",
		});*/

		long start1 = System.currentTimeMillis();
		new Solution().maximalRectangle2(new String[] {
				"11111101111111110111110111111111111110111101111111111111111111011111111011111111111111101110111110111111111001101111111111111011111111111111111001111111111111111111111111111111111101111101111111111110",
				"11111111111111101111111111111100111111111111111111111110111111111111111111111111101111111111011111111111111111111111111110111111111011111111111111111111111111111111111011111111111111001111111111111111",
				"01101101111111111111111111111111111111101111111111111111111101111111111111011110111111010111111111111111111111011111010111111111111111111111111111111111111011101111111111111111011111111111101111111100",
				"11111111011111111111111011111111111111111111111110111101111111111111111111101111111111111111111111111101011111111111110111111110110111111101111111111111111111111111100111111111101111101111101011111111",
				"11111111111111111111110011111111111111111111101111101111111111111111111111111111111111111111111111111111111111111111111111111111011101111101011111111111111111111111110111101111111111101111111111111111",
				"11111110111101110111111111111111111111111111111111111111111111111111101111111111111111110101111111101111011111111111110111101111101111111111111111111011101111111111111111111111111101101101111110111111",
				"11111111111111111101111111111111111101111111111111111111111111111111111111111111111111111111010111110111110111110111111111101110111111111111111111111110101111111110111111111111101110110111111101111111",
				"10111111111101111111111111111111111111111111111111111111111110011111101011011111111011111111111110111111111111111111111111111100101011001101111111011111111111011111111111101111111111111111111111101110",
				"11111111101010111110111101111110111111111010111111110111111111111111101111111111111111111111111111111011111111111111111111111111111111101111110111111111111111111111111111111110111111111011111111111111",
				"01110111111111111111011111111111111111111111111111111011111111111111111111111101100111111111111110111111110101110111111111111111101111111111111111101111111111101111111111101100110110111111111111010111",
				"11111111111011110111111111111101111111111111101111111111111001111111111111111110111111101111111111111111111111111111111111111111111111111111101111111111111111111111011111111111111111111011111111111111",
				"11111110101101011110111111111111111111011111111011111111111111111111111111111010111111101011111111111001111111111111111111111111111111111011111111111111110111101111111111011111111111111111111111111111",
				"11111111111111101111111110111111111111011111111111011111111111111111111111111111111101101111111111111111110111111111101111011111111111111111111111111110111111011111011111111010111111111111110111111101",
				"01111111111111110110111101111101110111101111101111110111111111111111111111111011111111111110111011011011111111111111111111111111111111110111111111110111111110110111011111111111111111110101111111111111",
				"01111111111011111111110010111111111100110111111111111111101111011111111111111111111111111011111111111111111111101111111111111101111111011111111111111101111111111111111111111111101111111011111101111111",
				"11111111111111111111111111111111111111111111111111111111111110111111111111111111111111111111111111111111111111111111111111011101111111111111111111111111111111111111111111111101111111111111111111111111",
				"11111111111011111111111111111111111111111111111111111111111011111101101111111111111111111011111101011111111011111111111101011110111110111111101111111111101111111111011111110110111111111111111111111110",
				"11110111111111111110011111111010111111111111101011111101111111111111111111111111111111111101111011111011111111111111111011011111111111111111111111111111111101111011111111111111111111111111111111111011",
				"11111110111111111011101111011111111111011111111111111111111110111111111111111111110101110111111111110011111111111110111101111111111111111101101111111111111111111101001111111111111111110110111111111111",
				"11111110111111111111111111111111111111111111111111010110111111111111111111111111111111111111111111111010111111111111111111111111101111111111111111111111111111101111111111111110111111111111111111111101",
				"11010111011010111111111111111111111111111111111111110110111110111111111111011111111111111111111110111111111111111111110111010111111111011011111111111111111111111111001111111111110111111111110110111111",
				"11111111111111111111111111111111110111111111110111111111111111111011111011111111111111111111111111111111010101111101111111111110111111111111111111111110111111111111111111111111011001111111111110111111",
				"11011111111111111111110111011111111111111111111111111111111111111111110111111111011110011111110111011100111111111111111111111111111111111111111111111111111111001111101111111111111111111111111111111111",
				"11111111101111111111111111110110111111111100111111111101111111111111111111111101110111101111111011110111111111111111111111111111110111111111111111011111111111111101011111111111101111111111111111111111",
				"11111111111111111101111111111111111111111111111111111100111111001111111111111111111111011111111101111111111111111110111110111111111011111111111111111111111111111111111111111111111101111111111111111111",
				"11111111111111111111111111111101110110111111111111111111111111111111111111011111011111111011111101111101101110111010111111101111101111111111111101111111111101110111101111111111111111111111111111111111",
				"11111111110111111111111111101111111111111110111111101111111111111111110111011111111111111111101110111010111111111111111111111111111111111111111111110111111011111001111111111111100111111111101111111111",
				"11111111111111111111111111111111111111111111111111111111111111111111111011111111111110011111111111101111111111111111111011111111101111111111111111111011111111111111111111111111111111111111111111111111",
				"11011011111111110111111110111011111101110111111111111011110111111111111011111111111111111100110111111111111111111111011111111110111111111010101111011111111011101111111111111101111111101110111111111111",
				"11111111111111111111111111111110011011111111111111101111111111111111111111111111011111111100111111101111111111111111111111111111101111111110111111111111111111111111111111111111111111111111111101111111",
				"11111111111111111111111111111111111111101101111011111111111111101111111111011111111101111111110111110111111111111111111111111111111010111111111111011111111111110111111101111111111101111111111111011011",
				"11011111111111111011111111111111111011111111111111101111111111111011111011011111111111111110110110111111111111111101111111110111111110111111111111111111111110111111011101110111111111111111111111111111",
				"01111111111111111011111110111011111111111111111110111111110111011111101111111111111101111111111111111111011111111111111111111111111111101100111111011111111111111111111111111111111111111111111111101011",
				"11111011111111101111111111001111001111011011111111111111111111111111111111111111111111111111011111110111111111101111111111111111111111111101111111111110111111101011111111111111111110111111111111110111",
				"11111111111101111111111101111111111111110110111110111111111111101011111101111111111111111101111110111011011111111101111111111101111111110011111111011111111111111111111111111111111111111111111111111110",
				"10111111111110111111111111101111111111111111111111101111111011111111011111111111111111111111111111111111111111111111111110111111111111111111111101111111111111101111111111011111101111011011111111111101",
				"11111110101111111111111111111111101111111111111111111111111111111111111111111111111111101111111111111111111111110111111011111111111111111111111011111111111011100111111111111111111111111111111111111111",
				"11111111111111111111111111111111111111111111110111111111111111111111011111111111111111111111111011111111111110100111111111110111111111111111101111111111111111111111111111111111111011111111111111111111",
				"10101111111111111111111011101111111111111110111111111010110111011111111110111111110111111101111111111111011111111111001111111111110111101111111101111111001111011111111111110110100111111111111110111111",
				"11111111111111111111111111011111111011111111111111111111111101111111111111111111011111111111111111111111111111111111111111101111111010101111111110110111011111110111111111111111111011111111111111111111",
				"11111011111111111111011111111111111101111110111111111111111111111111111111111111111110111111111011101101111111111101111111011111111111111111111111111111111111111111111111111111111110111110111111111111",
				"10111111110111111111111101111111101111111111110111111111110111111111111111111110111101111111011011110111111111111111011111111111111111011110110101101111111011111111110101111111111011111111111111111111",
				"11111111111011111111101110111111111111111111111111110111011111111111111111011110111111011111111011011101111111111110111111111111111111111011111111111111111111111001111111111111110111101111111111110111",
				"11111111111111111111111111111111111111111111011111111111011111111101110111111111111111111111101111110111101111111111011111111111111111111111111111111111111110111111111111111111111110111111111111101011",
				"11111111111111111011110111111111111110111111111111111101111111111110111111111111111111111111011111111111111111111111101111111011111111111111111111111111111101111111110111111110111111111111111011111111",
				"11111111111111111111111111111111111111111111111110101011111011111011111111111111111011111011111111111101111001111110101111111111111111111111111111111111111101111111111110111111110111111111111111111110",
				"11111111111111111111111111111111111111111111011011111110111111011111111101111111111111001111111111111111111111011111111111110111111111111111111111111111111111111111111111111111111111111111111111111111",
				"11111111111111110111111110111111111111111101111111111101111111111111111111111110011111111111111111111111111111111111101101111111011111111011111111111111111111101001111111111111111111111111111111110111",
				"11100111111111111011111111111111111111110101111101111111111111011111111011111111101111111011111111111111111111111111101110111111111101101111111111110111101111111111111111111111111101111101111111110101",
				"11111110111111111011101111011111111111011111111111111111111110111111111111111111110101110111111111110011111111111110111101111111111111111101101111111111111111111101001111111111111111110110111111111111",
				"11111111111111111111111111111111111111111111011011111110111111011111111101111111111111001111111111111111111111011111111111110111111111111111111111111111111111111111111111111111111111111111111111111111",
				"01101101111111111111111111111111111111101111111111111111111101111111111111011110111111010111111111111111111111011111010111111111111111111111111111111111111011101111111111111111011111111111101111111100",
				"11111111011111111111111011111111111111111111111110111101111111111111111111101111111111111111111111111101011111111111110111111110110111111101111111111111111111111111100111111111101111101111101011111111",
				"11111111111111111111110011111111111111111111101111101111111111111111111111111111111111111111111111111111111111111111111111111111011101111101011111111111111111111111110111101111111111101111111111111111",
				"11111110111101110111111111111111111111111111111111111111111111111111101111111111111111110101111111101111011111111111110111101111101111111111111111111011101111111111111111111111111101101101111110111111",
				"11111111111111111101111111111111111101111111111111111111111111111111111111111111111111111111010111110111110111110111111111101110111111111111111111111110101111111110111111111111101110110111111101111111",
				"10111111111110111111111111101111111111111111111111101111111011111111011111111111111111111111111111111111111111111111111110111111111111111111111101111111111111101111111111011111101111011011111111111101",
				"11111110101111111111111111111111101111111111111111111111111111111111111111111111111111101111111111111111111111110111111011111111111111111111111011111111111011100111111111111111111111111111111111111111",
				"11111111111111111111111111111111111111111111110111111111111111111111011111111111111111111111111011111111111110100111111111110111111111111111101111111111111111111111111111111111111011111111111111111111",
				"10101111111111111111111011101111111111111110111111111010110111011111111110111111110111111101111111111111011111111111001111111111110111101111111101111111001111011111111111110110100111111111111110111111",
				"11111111111111111111111111011111111011111111111111111111111101111111111111111111011111111111111111111111111111111111111111101111111010101111111110110111011111110111111111111111111011111111111111111111",
				"11111110111111111011101111011111111111011111111111111111111110111111111111111111110101110111111111110011111111111110111101111111111111111101101111111111111111111101001111111111111111110110111111111111",
				"11111110111111111111111111111111111111111111111111010110111111111111111111111111111111111111111111111010111111111111111111111111101111111111111111111111111111101111111111111110111111111111111111111101",
				"11010111011010111111111111111111111111111111111111110110111110111111111111011111111111111111111110111111111111111111110111010111111111011011111111111111111111111111001111111111110111111111110110111111",
				"11111111111111111111111111111111110111111111110111111111111111111011111011111111111111111111111111111111010101111101111111111110111111111111111111111110111111111111111111111111011001111111111110111111",
				"11011111111111111111110111011111111111111111111111111111111111111111110111111111011110011111110111011100111111111111111111111111111111111111111111111111111111001111101111111111111111111111111111111111",
				"01101101111111111111111111111111111111101111111111111111111101111111111111011110111111010111111111111111111111011111010111111111111111111111111111111111111011101111111111111111011111111111101111111100",
				"11111111011111111111111011111111111111111111111110111101111111111111111111101111111111111111111111111101011111111111110111111110110111111101111111111111111111111111100111111111101111101111101011111111",
				"11111111111111111111110011111111111111111111101111101111111111111111111111111111111111111111111111111111111111111111111111111111011101111101011111111111111111111111110111101111111111101111111111111111",
				"11111110111101110111111111111111111111111111111111111111111111111111101111111111111111110101111111101111011111111111110111101111101111111111111111111011101111111111111111111111111101101101111110111111",
		});
		System.out.println((System.currentTimeMillis() - start1) + "ms");

		new Solution().maximalRectangle2(new String[] {
				"101011011111",
				"110011101101",
				"010110100000",
				"001110001010",
				"101011110101",
				"111000000110",
				"010111011110",
				"011001001101",
				"101010011010",
				"011101000100"
		});

		new Solution().maximalRectangle2(new String[] {
				"01100",
				"00000",
				"01100"
		});

		new Solution().maximalRectangle(new char[][] {
				{'1', '0', '1', '1', '1'},
				{'0', '1', '0', '1', '1'},
				{'1', '1', '0', '1', '1'},
				{'1', '1', '0', '1', '1'},
				{'0', '1', '1', '1', '1'}}
		);

		new Solution().maximalRectangle(new char[][] {
				{'1', '1', '1', '1'},
				{'1', '1', '1', '1'},
				{'1', '1', '1', '1'}}
		);
		new Solution().maximalRectangle(new char[][] {
				{'0', '0', '0'},
				{'0', '0', '0'},
				{'1', '1', '1'}}
		);
		new Solution().maximalRectangle(new char[][] {
				{'1', '0', '1', '0', '0'},
				{'1', '0', '1', '1', '1'},
				{'1', '1', '1', '1', '1'},
				{'1', '0', '0', '1', '0'}}
				);
		new Solution().maximalRectangle(new char[][] {
				{'0', '1'},
				{'0', '1'}}
		);
	}

	private int maximalRectangle2(String[] arr) {
		char[][] newArr = new char[arr.length][arr[0].length()];
		for (int i = 0; i < arr.length; i++) {
			newArr[i] = arr[i].toCharArray();
		}
		return maximalRectangle(newArr);
	}

	/**
	 *
	 1 0 1 0 0
	 1 0 1 1 1
	 1 1 1 1 1
	 1 0 0 1 0
	 = 6
	 * @param matrix
	 * @return
	 */
	public int maximalRectangle(char[][] matrix) {

		List<IntervalTree> intervalList = createIntervals(matrix);

		if(intervalList.isEmpty()) {
			return 0;
		}

		List<Interval> mergedIntervals = intervalList.get(0).findIntersections(new Interval(0, Integer.MAX_VALUE));

		int max = 0;
		for (Interval mergedInterval : mergedIntervals) {
			max = Math.max(mergedInterval.length, max);
		}

		for(int i = 1; i < intervalList.size(); i++) {

			Set<Interval> newMergedIntervals = new LinkedHashSet<>();

			IntervalTree nextIntervalTree = intervalList.get(i);

			if(!mergedIntervals.isEmpty()) {
				for (Interval mergedInterval : mergedIntervals) {
					if(mergedInterval.length == max) {
						newMergedIntervals.add(mergedInterval);
					}

					if(mergedInterval.row <= i - 2) {
						continue;
					}

					for (Interval nextInterval : nextIntervalTree.findIntersections(mergedInterval)) {

						int left = intervalList.size() - i - 1;

						if(nextInterval.start <= mergedInterval.start) {
							int end = Math.min(mergedInterval.end, nextInterval.end);
							int newLength = end - mergedInterval.start;
							int prevLength = mergedInterval.length * newLength / (mergedInterval.end - mergedInterval.start);

							int length = newLength + prevLength;
							if(newLength * (left + 1) + prevLength >= max) {
								Interval newInterval = new Interval(mergedInterval.start, end, i, length);
								newMergedIntervals.add(newInterval);
								max = Math.max(newInterval.length, max);
							}

						} else {
							int end = Math.min(mergedInterval.end, nextInterval.end);
							int newLength = end - nextInterval.start;
							int prevLength = mergedInterval.length * newLength / (mergedInterval.end - mergedInterval.start);

							int length = newLength + prevLength;
							if(newLength * (left + 1) + prevLength >= max) {
								Interval newInterval = new Interval(nextInterval.start, end, i, length);
								newMergedIntervals.add(newInterval);
								max = Math.max(newInterval.length, max);
							}
						}
					}
				}
				for (Interval nextInterval : nextIntervalTree.findIntersections(new Interval(0, Integer.MAX_VALUE))) {
					newMergedIntervals.add(nextInterval);
					max = Math.max(nextInterval.length, max);
				}
			} else {
				for (Interval nextInterval : nextIntervalTree.findIntersections(new Interval(0, Integer.MAX_VALUE))) {
					newMergedIntervals.add(nextInterval);
					max = Math.max(nextInterval.length, max);
				}
			}

			mergedIntervals.clear();
			mergedIntervals.addAll(newMergedIntervals);
		}

		System.out.println(max);

		return max;
	}

	private List<IntervalTree> createIntervals(char[][] matrix) {
		List<IntervalTree> intervalList = new ArrayList<>();

		for(int i = 0; i < matrix.length; i++) {
			int start = -1;
			int end = -1;
			List<Interval> newIntervalList = new ArrayList<>();
			for(int j = 0; j < matrix[i].length; j++) {
				if(matrix[i][j] == '1') {
					if(start == -1) {
						start = j;
						end = start + 1;
					} else {
						end++;
					}
				} else {
					if(start != -1) {
						newIntervalList.add(new Interval(start, end, i, end - start));
					}
					start = -1;
					end = -1;
				}

			}
			if(start != -1) {
				newIntervalList.add(new Interval(start, end, i, end - start));
			}
			intervalList.add(new IntervalTree(i));

			long seed = System.nanoTime();
			Collections.shuffle(newIntervalList, new Random(seed));

			for (Interval interval : newIntervalList) {
				intervalList.get(i).insert(interval.start, interval.end);
			}
		}
		return intervalList;
	}

	public static class Interval {

		private int start;

		private int end;

		private int row;

		private int length;

		public Interval(int start, int end) {
			this.start = start;
			this.end = end;
			if(this.end == this.start) {
				this.end++;
			}
			this.length = end - start;
		}

		public Interval(int start, int end, int length) {
			this.start = start;
			this.end = end;
			this.length = length;
		}

		public Interval(int start, int end, int row, int length) {
			this.start = start;
			this.end = end;

			if(this.end == this.start) {
				this.end++;
			}

			this.row = row;

			this.length = length;
		}

		public int getStart() {
			return start;
		}

		public void setStart(int start) {
			this.start = start;
		}

		public int getEnd() {
			return end;
		}

		public void setEnd(int end) {
			this.end = end;
		}

		@Override
		public String toString() {
			return start + "-" + end + ":" + length + "/" + row;
		}

		@Override
		public boolean equals(Object o) {
			if (this == o) return true;
			if (o == null || getClass() != o.getClass()) return false;

			Interval interval = (Interval) o;

			if (start != interval.start) return false;
			if (end != interval.end) return false;
			if (row != interval.row) return false;
			return length == interval.length;
		}

		@Override
		public int hashCode() {
			int result = start;
			result = 31 * result + end;
			result = 31 * result + row;
			result = 31 * result + length;
			return result;
		}
	}

	public static class IntervalTree {

		private Node root;

		private int row;

		public IntervalTree(int row) {
			this.row = row;
		}

		public void insert(int start, int end) {

			if(root == null) {
				root = new Node(start, end, null);
			} else {
				insert(root, start, end);
			}
		}

		private void insert(Node parent, int start, int end) {

			if(end > parent.maxRight) {
				parent.maxRight = end;
			}

			if(start < parent.start) {

				if(parent.left == null) {
					parent.left = new Node(start, end, parent);
				} else {
					insert(parent.left, start, end);
				}

			} else {

				if(parent.right == null) {
					parent.right = new Node(start, end, parent);
				} else {
					insert(parent.right, start, end);
				}
			}
		}

		public List<Solution.Interval> findIntersections(Solution.Interval interval) {
			List<Solution.Interval> result = new ArrayList<>();
			findIntersections(root, interval, result);
			return result;
		}

		private void findIntersections(Node parent, Solution.Interval interval, List<Solution.Interval> acc) {

			if(parent == null) {
				return;
			}

			if(interval.getStart() <= parent.start && interval.getEnd() >= parent.start) {
				acc.add(toInterval(parent));
			} else if(interval.getStart() > parent.start && interval.getStart() <= parent.end) {
				acc.add(toInterval(parent));
			}

			if(interval.getStart() <= parent.start) {
				findIntersections(parent.left, interval, acc);
			}

			if(interval.getEnd() >= parent.start) {
				findIntersections(parent.right, interval, acc);
			}
		}

		private Solution.Interval toInterval(Node node) {
			return new Solution.Interval(node.start, node.end, row, node.length);
		}

		private static class Node {

			private final int start;

			private final int end;

			private int maxRight;

			private final int length;

			private Node parent;

			private Node left;

			private Node right;

			public Node(int start, int end, Node parent) {
				this.start = start;
				this.end = end == start? ++end: end;
				this.maxRight = end;
				this.length = end - start;
				this.parent = parent;
			}
		}
	}


}
